Theta Join
==========
Joining using comparison operators like <, >, <=, >=

Transaction
===========
A Transaction is single logical unit of work that modifies data.

ACID
====
In order to maintain consistency of data before and after transaction, ACID properties are followed.

A - Atomicity
C - Consistency
I - Isolation
D - Durability

Atomicity - This means that the entire transaction takes place at once or doesn't happen at all.

Consistency - Maintain data integrity. If there is a constraint violation, the transaction is rolled back.

Isolation - Each transaction happens in a queue one by one. Multiple transactions can happen at a same time, if same row gets modified by multiple transaction, then one transaction waits for another transaction to complete.

Durability - The changes made during the transaction lasts long.

Read Phenomena
==============
Isolation levels define the degree to which a transaction must be isolated from data modification.

Dirty Read - Does not get the data modified by another transaction.

Non Repeatable Read - When a transaction reads a row twice, and get a different value each time.

Phantom Read - Phantom Read occurs when two same queries retrieves two different set of results.

Set Theory
==========

A = {a, b, c}; B = {c, d, e}

A union B = {a, b, c, d, e}           // combines the set and removes duplicates
A union all B = {a, b, c, c, d, e}    // combines the set and does not remove duplicates
A intersect B = {c}                   // contains items that are available in both the sets
A minus B = {a, b}                    // contains all items in A, items in both A and B are removed

SQL
===
SQL Syntax for set operations:
[select-query-1] union [select-query-2]
[select-query-1] union all [select-query-2]
[select-query-1] intersect [select-query-2]
[select-query-1] minus [select-query-2]

Points to consider when using set operations in SQL:
====================================================
* The number of columns in SQL1 and SQL2 should match.
* The datatype of a column in SQL1 can be different from the same column in SQL2.
* Union All applies when the row data from SQL1 and SQL2 match all column data.

Set operations in MySQL
=======================
* MySQL directly supports Union and Union All
* MySQL does not directly support intersect and minus
* Refer below links that contains an alternative way to achieve intersect and minus using join:
  Intersect - https://www.mysqltutorial.org/mysql-intersect/
  Minus - https://www.mysqltutorial.org/mysql-minus/
* Union is supported using the 'union' clause.
* Union All is supported using the 'union all' clause.

View
====
* View is a like virtual table.
* It is operated based on a base table, but does not have data on its own.
* We can use view when we want to hide the complextity of a complex query.

Indexes
=======
* Index is a data structure that helps to improve the speed of operations in a table.
* Indexes can be created using one or more columns.
* MySQL internally creates indexes on primary key and foreign key.

Workbench column definition options
===================================
PK - Primary Key
NN - Not Null
BIN - Binary (stores data as binary strings)
UN - Unsigned (non-negative numbers only)
UQ - Create/remove Unique Key
ZF - Zero-Filled (if the length is 5 like INT(5) then every field is filled with 0â€™s to the 5th digit. 12 = 00012, 400 = 00400, etc. )
AI - Auto Increment
G - Generated column. i.e. value generated by a formula based on the other columns
