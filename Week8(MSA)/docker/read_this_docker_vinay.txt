Creating a Docker Image and running the container.

	Create a Maven/Spring project 
	Maven build the project, use "clean compile install", A JAR file should be now created under your 'target' folder
	Inside Project, create a file "DockerFile" in the root folder 
		Inside the file insert:
				FROM openjdk:8-jdk-alpine
				VOLUME /tmp
				ADD target/demo-0.0.1-SNAPSHOT.jar app.jar
				ENTRYPOINT ["java","-jar", "/app.jar"]
	
	https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index
	FROM: We're using an image built around JDK 8 
	VOLUME: Before a device can utilise a storage device, the OS has to make it accessible through the device's file system. VOLUME mounts 
		a directory inside of our container, can also be used to mount host directory inside the container. Enabling file sharing. 
		https://blog.container-solutions.com/understanding-volumes-docker
	ADD: Copies new files from directory, in this case our jar application. We map our jar file to "app.jar"
	ENTRYPOINT: Gives docker the commandline arguments necessary for the applciation (java -jar -<jar file name>)
	
	


	Navigate to the Project, with the DockerFile (Can be done by selecting properties of the file) 
	
	Command Line:
		1) docker -v : checks whether Docker is installed and what version it is. 
		2) Switch to project space using: cd <project-space> || Alternatively use docker build -f /path/Dockerfile
		2) docker build -t <tagname> : Creates a docker image, with -t used to give the image a name
		3) docker run -p<host port>:<docker port> <image name> : Run docker image in a container, using -p to specify mapping 
			from host port to docker port
		4) docker container stop <container name> : Stops container running 
		5) docker container start <container name> : Starts Docker container

		Extra) 	Docker ps : Returns all the dockers running
		        Docker ps -a: Returns all docker containers runnning or not running
			Docker image ls : Returns all docker images (the ones created by 2) 


Before VM Machines:
	Have all your applications running on a single server machine. Difficult to manage how much resource an app might take, causing other
	apps to underperform. Can resolve it by putting each application on a seperate system, but that can be expensive and difficult to scale. 

VM Machine:
	VM's emulates a physical machine and can be treated as such. On a single system, you can have multiple isolated VMs running. This gives you 
	the benefit of running apps on each VM and also effectively having isolated systems to play around with (i.e. testing software). Each VM will
	have it's own OS, libraries and applications. VMs are managed using Hypervisor. 

Container:
	VMs can be viewed as hardware virtualisation, container is a OS virtualisation. Each container will share the same OS kernel as its host. They
	don't offer the same level of isolation as VMs, containers can share the OS kernel and libarires too. Docker's are managed using Container engine
	(Docker).
	The advantages are that containers are:
		Much smaller in size than VMs, megabytes compared to gigabytes, allowing quicker boot ups. 
		Much more portable than VMs because container's share the same OS. (Seperate OS system images cause overhead in memory)
		There is less management overhead due to containers sharing the same operating system. 
	NOTE: You can use both VMs and containers to meet your business demands. 
Docker file:
	Includes the necessary information to configure and build a docker image. Images can also be created using the interactive method. 
	https://jfrog.com/knowledge-base/a-beginners-guide-to-understanding-and-building-docker-images/

Docker Image:
	A template for how to run a container. There are pre-made docker images on docker hub for easy start up, e.g. 8-jdk-alpine. You specify 
	a docker image using Docker file. Advantages of using a docker image is that 

Docker compose:
	Is a tool for defining and running applications with multiple docker containers. Uses a YAML file to configure application's services, which 
	allows you to then launch multiple containers 

	Steps) Define Dockerfile -> Define the services that make up you app in docker-compose.yml -> CLI "docker-compose up"

Docker registry:
	Stores and distribute Docker images, stateless and scalable. 

Docker container:
	Is where the docker image will actually be running.

	Benefits of Docker:
	1) Reproducibility/Distribution: All images built from the same Dockerfile will behave identically. Easy to distribute within your organisation
	2) Isolation: Seperate containers will avoid dependecies or plugins conflicting with each other. 
	3) Security: If one contianer is comprised, the others will remain unaffected
	4) Docker Hub: Contains a lot of premade image makes life easier 
	5) Environment Management: Isolated containers allow you to do testing, development and production on the same server. 
	6) Continous integration: Designed to work well as part of continous integration pipelines with Jenkins. 

	Disadvantages:
	1) Increased overhead: Communication and managing multiple containers ain't easy, better have a sysadmin
	2) Decreased performance: Processes will run quicker on native OS compared to within containers. 
	3) Multiple operating systems: Docker containers share the same OS, VMs are needed if you want to use seperate OS.
	4) Security : Containers are isolated, but the OS is shared. If the OS is comprimised, all containers will be affected. 
	